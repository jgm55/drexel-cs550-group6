# CS550 Group 6
# Tom Houman (A4 Leader)
# Ryan Daugherty
# Joe Muoio
# CS550 Spring 2013
# Assignment 4

The compiler is working with procedures, including recursion.

File summary:
 - implementation.py: Main code entry point, parses code into data structures
 - structures.py: All of the compiling is done here using the parsed structures
 - list_structures.py: Legacy list implementation (compiler does not support lists)
 - sample<N>.txt: Samples used to test the compiler, all working correctly

After running 'make compile':
 - symbolic.out: Symbolic RAL code
 - linkedNonOpt.out: Non-optimized linked RAL code
 - linkedOptimized.out: Optimized linked RAL code
 - symbolTable.out: Symbol table for input to RAM simulator
 - activationRecords.out: Summary of the activation records in symbol table format

We tested it using a variety of functions, expressions, and if/while statements.
The samples used to test the code are included and are named sampleN.txt. All tests
were run on both MacOS 10.7.5 and tux.

For the optimization if there are any consecutive loads/stores to the same address, we remove
the second line. NOTE: if the second line is a labelled line we do not remove this as that line 
needs to be executed when it is jumped to. We do this optimization every combination of
consecutive load/store (eg: load/load, load/store, etc). Furthermore, all constants are stored
globally only once, so this can be considered an optimization.
	
to run:

	make view: views the python code
	make compile : runs the python code 
	
	make view-trans : views the symbolic code
	make view-link : views the linked code
	make view-op : views the optimized linked code
	
	make run : runs the non optimized code on the RAM simulator
	make run-op : runs the optimized code on the RAM simulator
	
	make clean : cleans the out files and the pyc files

	<optional> set RAM_MEM before invoking run target to specify memory size:
	   RAM_MEM=100 make run