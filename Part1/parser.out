Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt SEMICOLON stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt_list -> SEMICOLON
Rule 5     stmt -> assign_stmt
Rule 6     stmt -> while_stmt
Rule 7     stmt -> if_stmt
Rule 8     stmt -> define_stmt
Rule 9     expr -> expr PLUS term
Rule 10    expr -> expr MINUS term
Rule 11    expr_list -> expr COMMA expr_list
Rule 12    expr_list -> expr
Rule 13    expr -> term
Rule 14    term -> term TIMES fact
Rule 15    term -> fact
Rule 16    fact -> LPAREN expr RPAREN
Rule 17    fact -> NUMBER
Rule 18    fact -> IDENT
Rule 19    fact -> func_call
Rule 20    assign_stmt -> IDENT ASSIGNOP expr
Rule 21    while_stmt -> WHILE expr DO stmt_list OD
Rule 22    if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI
Rule 23    define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
Rule 24    param_list -> IDENT COMMA param_list
Rule 25    param_list -> IDENT
Rule 26    func_call -> IDENT LPAREN expr_list RPAREN
Rule 27    expr -> expr CONCAT list
Rule 28    list -> LSQUARE sequence RSQUARE
Rule 29    list -> LSQUARE RSQUARE
Rule 30    sequence -> list_element COMMA sequence
Rule 31    sequence -> list_element
Rule 32    list_element -> expr
Rule 33    expr -> list
Rule 34    func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN
Rule 35    func_call -> CAR LPAREN IDENT RPAREN
Rule 36    func_call -> CDR LPAREN IDENT RPAREN
Rule 37    func_call -> NULLP LPAREN IDENT RPAREN
Rule 38    func_call -> INTP LPAREN IDENT RPAREN
Rule 39    func_call -> LISTP LPAREN IDENT RPAREN

Terminals, with rules where they appear

ASSIGNOP             : 20
CAR                  : 35
CDR                  : 36
COMMA                : 11 24 30 34
CONCAT               : 27
CONS                 : 34
DEFINE               : 23
DO                   : 21
ELSE                 : 22
END                  : 23
FI                   : 22
IDENT                : 18 20 23 24 25 26 34 34 35 36 37 38 39
IF                   : 22
INTP                 : 38
LISTP                : 39
LPAREN               : 16 23 26 34 35 36 37 38 39
LSQUARE              : 28 29
MINUS                : 10
NULLP                : 37
NUMBER               : 17
OD                   : 21
PLUS                 : 9
PROC                 : 23
RPAREN               : 16 23 26 34 35 36 37 38 39
RSQUARE              : 28 29
SEMICOLON            : 2 4
THEN                 : 22
TIMES                : 14
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

assign_stmt          : 5
define_stmt          : 8
expr                 : 9 10 11 12 16 20 21 22 27 32
expr_list            : 11 26
fact                 : 14 15
func_call            : 19
if_stmt              : 7
list                 : 27 33
list_element         : 30 31
param_list           : 23 24
program              : 0
sequence             : 28 30
stmt                 : 2 3
stmt_list            : 1 2 21 22 22 23
term                 : 9 10 13 14
while_stmt           : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 10
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12
    program                        shift and go to state 5

state 1

    (21) while_stmt -> WHILE . expr DO stmt_list OD
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr                           shift and go to state 23
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 2

    (4) stmt_list -> SEMICOLON .

    END             reduce using rule 4 (stmt_list -> SEMICOLON .)
    $end            reduce using rule 4 (stmt_list -> SEMICOLON .)
    OD              reduce using rule 4 (stmt_list -> SEMICOLON .)
    ELSE            reduce using rule 4 (stmt_list -> SEMICOLON .)
    FI              reduce using rule 4 (stmt_list -> SEMICOLON .)


state 3

    (8) stmt -> define_stmt .

    SEMICOLON       reduce using rule 8 (stmt -> define_stmt .)
    OD              reduce using rule 8 (stmt -> define_stmt .)
    $end            reduce using rule 8 (stmt -> define_stmt .)
    ELSE            reduce using rule 8 (stmt -> define_stmt .)
    FI              reduce using rule 8 (stmt -> define_stmt .)
    END             reduce using rule 8 (stmt -> define_stmt .)


state 4

    (5) stmt -> assign_stmt .

    SEMICOLON       reduce using rule 5 (stmt -> assign_stmt .)
    OD              reduce using rule 5 (stmt -> assign_stmt .)
    $end            reduce using rule 5 (stmt -> assign_stmt .)
    ELSE            reduce using rule 5 (stmt -> assign_stmt .)
    FI              reduce using rule 5 (stmt -> assign_stmt .)
    END             reduce using rule 5 (stmt -> assign_stmt .)


state 5

    (0) S' -> program .



state 6

    (23) define_stmt -> DEFINE . IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 28


state 7

    (20) assign_stmt -> IDENT . ASSIGNOP expr

    ASSIGNOP        shift and go to state 29


state 8

    (2) stmt_list -> stmt . SEMICOLON stmt_list
    (3) stmt_list -> stmt .

    SEMICOLON       shift and go to state 30
    END             reduce using rule 3 (stmt_list -> stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt .)
    OD              reduce using rule 3 (stmt_list -> stmt .)
    ELSE            reduce using rule 3 (stmt_list -> stmt .)
    FI              reduce using rule 3 (stmt_list -> stmt .)


state 9

    (22) if_stmt -> IF . expr THEN stmt_list ELSE stmt_list FI
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr                           shift and go to state 31
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 10

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 11

    (7) stmt -> if_stmt .

    SEMICOLON       reduce using rule 7 (stmt -> if_stmt .)
    OD              reduce using rule 7 (stmt -> if_stmt .)
    $end            reduce using rule 7 (stmt -> if_stmt .)
    ELSE            reduce using rule 7 (stmt -> if_stmt .)
    FI              reduce using rule 7 (stmt -> if_stmt .)
    END             reduce using rule 7 (stmt -> if_stmt .)


state 12

    (6) stmt -> while_stmt .

    SEMICOLON       reduce using rule 6 (stmt -> while_stmt .)
    OD              reduce using rule 6 (stmt -> while_stmt .)
    $end            reduce using rule 6 (stmt -> while_stmt .)
    ELSE            reduce using rule 6 (stmt -> while_stmt .)
    FI              reduce using rule 6 (stmt -> while_stmt .)
    END             reduce using rule 6 (stmt -> while_stmt .)


state 13

    (34) func_call -> CONS . LPAREN IDENT COMMA IDENT RPAREN

    LPAREN          shift and go to state 32


state 14

    (28) list -> LSQUARE . sequence RSQUARE
    (29) list -> LSQUARE . RSQUARE
    (30) sequence -> . list_element COMMA sequence
    (31) sequence -> . list_element
    (32) list_element -> . expr
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    RSQUARE         shift and go to state 34
    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    list_element                   shift and go to state 35
    term                           shift and go to state 22
    sequence                       shift and go to state 33
    expr                           shift and go to state 36
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 15

    (17) fact -> NUMBER .

    TIMES           reduce using rule 17 (fact -> NUMBER .)
    RPAREN          reduce using rule 17 (fact -> NUMBER .)
    PLUS            reduce using rule 17 (fact -> NUMBER .)
    MINUS           reduce using rule 17 (fact -> NUMBER .)
    CONCAT          reduce using rule 17 (fact -> NUMBER .)
    DO              reduce using rule 17 (fact -> NUMBER .)
    THEN            reduce using rule 17 (fact -> NUMBER .)
    COMMA           reduce using rule 17 (fact -> NUMBER .)
    RSQUARE         reduce using rule 17 (fact -> NUMBER .)
    SEMICOLON       reduce using rule 17 (fact -> NUMBER .)
    $end            reduce using rule 17 (fact -> NUMBER .)
    OD              reduce using rule 17 (fact -> NUMBER .)
    ELSE            reduce using rule 17 (fact -> NUMBER .)
    FI              reduce using rule 17 (fact -> NUMBER .)
    END             reduce using rule 17 (fact -> NUMBER .)


state 16

    (35) func_call -> CAR . LPAREN IDENT RPAREN

    LPAREN          shift and go to state 37


state 17

    (19) fact -> func_call .

    TIMES           reduce using rule 19 (fact -> func_call .)
    RPAREN          reduce using rule 19 (fact -> func_call .)
    PLUS            reduce using rule 19 (fact -> func_call .)
    MINUS           reduce using rule 19 (fact -> func_call .)
    CONCAT          reduce using rule 19 (fact -> func_call .)
    DO              reduce using rule 19 (fact -> func_call .)
    THEN            reduce using rule 19 (fact -> func_call .)
    COMMA           reduce using rule 19 (fact -> func_call .)
    RSQUARE         reduce using rule 19 (fact -> func_call .)
    SEMICOLON       reduce using rule 19 (fact -> func_call .)
    $end            reduce using rule 19 (fact -> func_call .)
    OD              reduce using rule 19 (fact -> func_call .)
    ELSE            reduce using rule 19 (fact -> func_call .)
    FI              reduce using rule 19 (fact -> func_call .)
    END             reduce using rule 19 (fact -> func_call .)


state 18

    (18) fact -> IDENT .
    (26) func_call -> IDENT . LPAREN expr_list RPAREN

    TIMES           reduce using rule 18 (fact -> IDENT .)
    RPAREN          reduce using rule 18 (fact -> IDENT .)
    PLUS            reduce using rule 18 (fact -> IDENT .)
    MINUS           reduce using rule 18 (fact -> IDENT .)
    CONCAT          reduce using rule 18 (fact -> IDENT .)
    DO              reduce using rule 18 (fact -> IDENT .)
    THEN            reduce using rule 18 (fact -> IDENT .)
    COMMA           reduce using rule 18 (fact -> IDENT .)
    RSQUARE         reduce using rule 18 (fact -> IDENT .)
    SEMICOLON       reduce using rule 18 (fact -> IDENT .)
    $end            reduce using rule 18 (fact -> IDENT .)
    OD              reduce using rule 18 (fact -> IDENT .)
    ELSE            reduce using rule 18 (fact -> IDENT .)
    FI              reduce using rule 18 (fact -> IDENT .)
    END             reduce using rule 18 (fact -> IDENT .)
    LPAREN          shift and go to state 38


state 19

    (37) func_call -> NULLP . LPAREN IDENT RPAREN

    LPAREN          shift and go to state 39


state 20

    (38) func_call -> INTP . LPAREN IDENT RPAREN

    LPAREN          shift and go to state 40


state 21

    (16) fact -> LPAREN . expr RPAREN
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr                           shift and go to state 41
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 22

    (13) expr -> term .
    (14) term -> term . TIMES fact

    PLUS            reduce using rule 13 (expr -> term .)
    MINUS           reduce using rule 13 (expr -> term .)
    CONCAT          reduce using rule 13 (expr -> term .)
    COMMA           reduce using rule 13 (expr -> term .)
    RSQUARE         reduce using rule 13 (expr -> term .)
    THEN            reduce using rule 13 (expr -> term .)
    RPAREN          reduce using rule 13 (expr -> term .)
    SEMICOLON       reduce using rule 13 (expr -> term .)
    $end            reduce using rule 13 (expr -> term .)
    OD              reduce using rule 13 (expr -> term .)
    ELSE            reduce using rule 13 (expr -> term .)
    FI              reduce using rule 13 (expr -> term .)
    END             reduce using rule 13 (expr -> term .)
    DO              reduce using rule 13 (expr -> term .)
    TIMES           shift and go to state 42


state 23

    (21) while_stmt -> WHILE expr . DO stmt_list OD
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    DO              shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 24

    (33) expr -> list .

    PLUS            reduce using rule 33 (expr -> list .)
    MINUS           reduce using rule 33 (expr -> list .)
    CONCAT          reduce using rule 33 (expr -> list .)
    COMMA           reduce using rule 33 (expr -> list .)
    RSQUARE         reduce using rule 33 (expr -> list .)
    THEN            reduce using rule 33 (expr -> list .)
    RPAREN          reduce using rule 33 (expr -> list .)
    SEMICOLON       reduce using rule 33 (expr -> list .)
    $end            reduce using rule 33 (expr -> list .)
    OD              reduce using rule 33 (expr -> list .)
    ELSE            reduce using rule 33 (expr -> list .)
    FI              reduce using rule 33 (expr -> list .)
    END             reduce using rule 33 (expr -> list .)
    DO              reduce using rule 33 (expr -> list .)


state 25

    (39) func_call -> LISTP . LPAREN IDENT RPAREN

    LPAREN          shift and go to state 47


state 26

    (36) func_call -> CDR . LPAREN IDENT RPAREN

    LPAREN          shift and go to state 48


state 27

    (15) term -> fact .

    TIMES           reduce using rule 15 (term -> fact .)
    DO              reduce using rule 15 (term -> fact .)
    PLUS            reduce using rule 15 (term -> fact .)
    MINUS           reduce using rule 15 (term -> fact .)
    CONCAT          reduce using rule 15 (term -> fact .)
    THEN            reduce using rule 15 (term -> fact .)
    COMMA           reduce using rule 15 (term -> fact .)
    RSQUARE         reduce using rule 15 (term -> fact .)
    RPAREN          reduce using rule 15 (term -> fact .)
    SEMICOLON       reduce using rule 15 (term -> fact .)
    $end            reduce using rule 15 (term -> fact .)
    OD              reduce using rule 15 (term -> fact .)
    ELSE            reduce using rule 15 (term -> fact .)
    FI              reduce using rule 15 (term -> fact .)
    END             reduce using rule 15 (term -> fact .)


state 28

    (23) define_stmt -> DEFINE IDENT . PROC LPAREN param_list RPAREN stmt_list END

    PROC            shift and go to state 49


state 29

    (20) assign_stmt -> IDENT ASSIGNOP . expr
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr                           shift and go to state 50
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 30

    (2) stmt_list -> stmt SEMICOLON . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 51
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12

state 31

    (22) if_stmt -> IF expr . THEN stmt_list ELSE stmt_list FI
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    THEN            shift and go to state 52
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 32

    (34) func_call -> CONS LPAREN . IDENT COMMA IDENT RPAREN

    IDENT           shift and go to state 53


state 33

    (28) list -> LSQUARE sequence . RSQUARE

    RSQUARE         shift and go to state 54


state 34

    (29) list -> LSQUARE RSQUARE .

    DO              reduce using rule 29 (list -> LSQUARE RSQUARE .)
    PLUS            reduce using rule 29 (list -> LSQUARE RSQUARE .)
    MINUS           reduce using rule 29 (list -> LSQUARE RSQUARE .)
    CONCAT          reduce using rule 29 (list -> LSQUARE RSQUARE .)
    COMMA           reduce using rule 29 (list -> LSQUARE RSQUARE .)
    RSQUARE         reduce using rule 29 (list -> LSQUARE RSQUARE .)
    THEN            reduce using rule 29 (list -> LSQUARE RSQUARE .)
    RPAREN          reduce using rule 29 (list -> LSQUARE RSQUARE .)
    SEMICOLON       reduce using rule 29 (list -> LSQUARE RSQUARE .)
    $end            reduce using rule 29 (list -> LSQUARE RSQUARE .)
    OD              reduce using rule 29 (list -> LSQUARE RSQUARE .)
    ELSE            reduce using rule 29 (list -> LSQUARE RSQUARE .)
    FI              reduce using rule 29 (list -> LSQUARE RSQUARE .)
    END             reduce using rule 29 (list -> LSQUARE RSQUARE .)


state 35

    (30) sequence -> list_element . COMMA sequence
    (31) sequence -> list_element .

    COMMA           shift and go to state 55
    RSQUARE         reduce using rule 31 (sequence -> list_element .)


state 36

    (32) list_element -> expr .
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    COMMA           reduce using rule 32 (list_element -> expr .)
    RSQUARE         reduce using rule 32 (list_element -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 37

    (35) func_call -> CAR LPAREN . IDENT RPAREN

    IDENT           shift and go to state 56


state 38

    (26) func_call -> IDENT LPAREN . expr_list RPAREN
    (11) expr_list -> . expr COMMA expr_list
    (12) expr_list -> . expr
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr_list                      shift and go to state 57
    list                           shift and go to state 24
    expr                           shift and go to state 58
    fact                           shift and go to state 27

state 39

    (37) func_call -> NULLP LPAREN . IDENT RPAREN

    IDENT           shift and go to state 59


state 40

    (38) func_call -> INTP LPAREN . IDENT RPAREN

    IDENT           shift and go to state 60


state 41

    (16) fact -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 42

    (14) term -> term TIMES . fact
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    fact                           shift and go to state 62

state 43

    (21) while_stmt -> WHILE expr DO . stmt_list OD
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 63
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12

state 44

    (9) expr -> expr PLUS . term
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 64
    fact                           shift and go to state 27

state 45

    (10) expr -> expr MINUS . term
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 65
    fact                           shift and go to state 27

state 46

    (27) expr -> expr CONCAT . list
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE

    LSQUARE         shift and go to state 14

    list                           shift and go to state 66

state 47

    (39) func_call -> LISTP LPAREN . IDENT RPAREN

    IDENT           shift and go to state 67


state 48

    (36) func_call -> CDR LPAREN . IDENT RPAREN

    IDENT           shift and go to state 68


state 49

    (23) define_stmt -> DEFINE IDENT PROC . LPAREN param_list RPAREN stmt_list END

    LPAREN          shift and go to state 69


state 50

    (20) assign_stmt -> IDENT ASSIGNOP expr .
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    SEMICOLON       reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    $end            reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    OD              reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    ELSE            reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    FI              reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    END             reduce using rule 20 (assign_stmt -> IDENT ASSIGNOP expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 51

    (2) stmt_list -> stmt SEMICOLON stmt_list .

    END             reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    $end            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    OD              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    ELSE            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    FI              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)


state 52

    (22) if_stmt -> IF expr THEN . stmt_list ELSE stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 70
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12

state 53

    (34) func_call -> CONS LPAREN IDENT . COMMA IDENT RPAREN

    COMMA           shift and go to state 71


state 54

    (28) list -> LSQUARE sequence RSQUARE .

    DO              reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    PLUS            reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    MINUS           reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    CONCAT          reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    COMMA           reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    RSQUARE         reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    THEN            reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    RPAREN          reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    SEMICOLON       reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    $end            reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    OD              reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    ELSE            reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    FI              reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)
    END             reduce using rule 28 (list -> LSQUARE sequence RSQUARE .)


state 55

    (30) sequence -> list_element COMMA . sequence
    (30) sequence -> . list_element COMMA sequence
    (31) sequence -> . list_element
    (32) list_element -> . expr
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    list_element                   shift and go to state 35
    term                           shift and go to state 22
    sequence                       shift and go to state 72
    expr                           shift and go to state 36
    list                           shift and go to state 24
    fact                           shift and go to state 27

state 56

    (35) func_call -> CAR LPAREN IDENT . RPAREN

    RPAREN          shift and go to state 73


state 57

    (26) func_call -> IDENT LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 74


state 58

    (11) expr_list -> expr . COMMA expr_list
    (12) expr_list -> expr .
    (9) expr -> expr . PLUS term
    (10) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list

    COMMA           shift and go to state 75
    RPAREN          reduce using rule 12 (expr_list -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 59

    (37) func_call -> NULLP LPAREN IDENT . RPAREN

    RPAREN          shift and go to state 76


state 60

    (38) func_call -> INTP LPAREN IDENT . RPAREN

    RPAREN          shift and go to state 77


state 61

    (16) fact -> LPAREN expr RPAREN .

    TIMES           reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    CONCAT          reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    DO              reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    THEN            reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    $end            reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    OD              reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    FI              reduce using rule 16 (fact -> LPAREN expr RPAREN .)
    END             reduce using rule 16 (fact -> LPAREN expr RPAREN .)


state 62

    (14) term -> term TIMES fact .

    TIMES           reduce using rule 14 (term -> term TIMES fact .)
    DO              reduce using rule 14 (term -> term TIMES fact .)
    PLUS            reduce using rule 14 (term -> term TIMES fact .)
    MINUS           reduce using rule 14 (term -> term TIMES fact .)
    CONCAT          reduce using rule 14 (term -> term TIMES fact .)
    THEN            reduce using rule 14 (term -> term TIMES fact .)
    COMMA           reduce using rule 14 (term -> term TIMES fact .)
    RSQUARE         reduce using rule 14 (term -> term TIMES fact .)
    RPAREN          reduce using rule 14 (term -> term TIMES fact .)
    SEMICOLON       reduce using rule 14 (term -> term TIMES fact .)
    $end            reduce using rule 14 (term -> term TIMES fact .)
    OD              reduce using rule 14 (term -> term TIMES fact .)
    ELSE            reduce using rule 14 (term -> term TIMES fact .)
    FI              reduce using rule 14 (term -> term TIMES fact .)
    END             reduce using rule 14 (term -> term TIMES fact .)


state 63

    (21) while_stmt -> WHILE expr DO stmt_list . OD

    OD              shift and go to state 78


state 64

    (9) expr -> expr PLUS term .
    (14) term -> term . TIMES fact

    PLUS            reduce using rule 9 (expr -> expr PLUS term .)
    MINUS           reduce using rule 9 (expr -> expr PLUS term .)
    CONCAT          reduce using rule 9 (expr -> expr PLUS term .)
    COMMA           reduce using rule 9 (expr -> expr PLUS term .)
    RSQUARE         reduce using rule 9 (expr -> expr PLUS term .)
    THEN            reduce using rule 9 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 9 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 9 (expr -> expr PLUS term .)
    $end            reduce using rule 9 (expr -> expr PLUS term .)
    OD              reduce using rule 9 (expr -> expr PLUS term .)
    ELSE            reduce using rule 9 (expr -> expr PLUS term .)
    FI              reduce using rule 9 (expr -> expr PLUS term .)
    END             reduce using rule 9 (expr -> expr PLUS term .)
    DO              reduce using rule 9 (expr -> expr PLUS term .)
    TIMES           shift and go to state 42


state 65

    (10) expr -> expr MINUS term .
    (14) term -> term . TIMES fact

    PLUS            reduce using rule 10 (expr -> expr MINUS term .)
    MINUS           reduce using rule 10 (expr -> expr MINUS term .)
    CONCAT          reduce using rule 10 (expr -> expr MINUS term .)
    COMMA           reduce using rule 10 (expr -> expr MINUS term .)
    RSQUARE         reduce using rule 10 (expr -> expr MINUS term .)
    THEN            reduce using rule 10 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 10 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 10 (expr -> expr MINUS term .)
    $end            reduce using rule 10 (expr -> expr MINUS term .)
    OD              reduce using rule 10 (expr -> expr MINUS term .)
    ELSE            reduce using rule 10 (expr -> expr MINUS term .)
    FI              reduce using rule 10 (expr -> expr MINUS term .)
    END             reduce using rule 10 (expr -> expr MINUS term .)
    DO              reduce using rule 10 (expr -> expr MINUS term .)
    TIMES           shift and go to state 42


state 66

    (27) expr -> expr CONCAT list .

    PLUS            reduce using rule 27 (expr -> expr CONCAT list .)
    MINUS           reduce using rule 27 (expr -> expr CONCAT list .)
    CONCAT          reduce using rule 27 (expr -> expr CONCAT list .)
    COMMA           reduce using rule 27 (expr -> expr CONCAT list .)
    RSQUARE         reduce using rule 27 (expr -> expr CONCAT list .)
    THEN            reduce using rule 27 (expr -> expr CONCAT list .)
    RPAREN          reduce using rule 27 (expr -> expr CONCAT list .)
    SEMICOLON       reduce using rule 27 (expr -> expr CONCAT list .)
    $end            reduce using rule 27 (expr -> expr CONCAT list .)
    OD              reduce using rule 27 (expr -> expr CONCAT list .)
    ELSE            reduce using rule 27 (expr -> expr CONCAT list .)
    FI              reduce using rule 27 (expr -> expr CONCAT list .)
    END             reduce using rule 27 (expr -> expr CONCAT list .)
    DO              reduce using rule 27 (expr -> expr CONCAT list .)


state 67

    (39) func_call -> LISTP LPAREN IDENT . RPAREN

    RPAREN          shift and go to state 79


state 68

    (36) func_call -> CDR LPAREN IDENT . RPAREN

    RPAREN          shift and go to state 80


state 69

    (23) define_stmt -> DEFINE IDENT PROC LPAREN . param_list RPAREN stmt_list END
    (24) param_list -> . IDENT COMMA param_list
    (25) param_list -> . IDENT

    IDENT           shift and go to state 81

    param_list                     shift and go to state 82

state 70

    (22) if_stmt -> IF expr THEN stmt_list . ELSE stmt_list FI

    ELSE            shift and go to state 83


state 71

    (34) func_call -> CONS LPAREN IDENT COMMA . IDENT RPAREN

    IDENT           shift and go to state 84


state 72

    (30) sequence -> list_element COMMA sequence .

    RSQUARE         reduce using rule 30 (sequence -> list_element COMMA sequence .)


state 73

    (35) func_call -> CAR LPAREN IDENT RPAREN .

    TIMES           reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    PLUS            reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    MINUS           reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    CONCAT          reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    SEMICOLON       reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    $end            reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    OD              reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    ELSE            reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    FI              reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    END             reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    DO              reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    THEN            reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    COMMA           reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    RSQUARE         reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)
    RPAREN          reduce using rule 35 (func_call -> CAR LPAREN IDENT RPAREN .)


state 74

    (26) func_call -> IDENT LPAREN expr_list RPAREN .

    TIMES           reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    CONCAT          reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    $end            reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    OD              reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    ELSE            reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    FI              reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    END             reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    DO              reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    THEN            reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RSQUARE         reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 26 (func_call -> IDENT LPAREN expr_list RPAREN .)


state 75

    (11) expr_list -> expr COMMA . expr_list
    (11) expr_list -> . expr COMMA expr_list
    (12) expr_list -> . expr
    (9) expr -> . expr PLUS term
    (10) expr -> . expr MINUS term
    (13) expr -> . term
    (27) expr -> . expr CONCAT list
    (33) expr -> . list
    (14) term -> . term TIMES fact
    (15) term -> . fact
    (28) list -> . LSQUARE sequence RSQUARE
    (29) list -> . LSQUARE RSQUARE
    (16) fact -> . LPAREN expr RPAREN
    (17) fact -> . NUMBER
    (18) fact -> . IDENT
    (19) fact -> . func_call
    (26) func_call -> . IDENT LPAREN expr_list RPAREN
    (34) func_call -> . CONS LPAREN IDENT COMMA IDENT RPAREN
    (35) func_call -> . CAR LPAREN IDENT RPAREN
    (36) func_call -> . CDR LPAREN IDENT RPAREN
    (37) func_call -> . NULLP LPAREN IDENT RPAREN
    (38) func_call -> . INTP LPAREN IDENT RPAREN
    (39) func_call -> . LISTP LPAREN IDENT RPAREN

    LSQUARE         shift and go to state 14
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 15
    IDENT           shift and go to state 18
    CONS            shift and go to state 13
    CAR             shift and go to state 16
    CDR             shift and go to state 26
    NULLP           shift and go to state 19
    INTP            shift and go to state 20
    LISTP           shift and go to state 25

    func_call                      shift and go to state 17
    term                           shift and go to state 22
    expr                           shift and go to state 58
    list                           shift and go to state 24
    expr_list                      shift and go to state 85
    fact                           shift and go to state 27

state 76

    (37) func_call -> NULLP LPAREN IDENT RPAREN .

    TIMES           reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    PLUS            reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    MINUS           reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    CONCAT          reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    SEMICOLON       reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    $end            reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    OD              reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    ELSE            reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    FI              reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    END             reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    DO              reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    THEN            reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    COMMA           reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    RSQUARE         reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)
    RPAREN          reduce using rule 37 (func_call -> NULLP LPAREN IDENT RPAREN .)


state 77

    (38) func_call -> INTP LPAREN IDENT RPAREN .

    TIMES           reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    PLUS            reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    MINUS           reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    CONCAT          reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    SEMICOLON       reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    $end            reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    OD              reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    ELSE            reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    FI              reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    END             reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    DO              reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    THEN            reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    COMMA           reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    RSQUARE         reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)
    RPAREN          reduce using rule 38 (func_call -> INTP LPAREN IDENT RPAREN .)


state 78

    (21) while_stmt -> WHILE expr DO stmt_list OD .

    SEMICOLON       reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)
    ELSE            reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)
    FI              reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)
    OD              reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)
    END             reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)
    $end            reduce using rule 21 (while_stmt -> WHILE expr DO stmt_list OD .)


state 79

    (39) func_call -> LISTP LPAREN IDENT RPAREN .

    TIMES           reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    PLUS            reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    MINUS           reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    CONCAT          reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    SEMICOLON       reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    $end            reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    OD              reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    ELSE            reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    FI              reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    END             reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    DO              reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    THEN            reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    COMMA           reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    RSQUARE         reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)
    RPAREN          reduce using rule 39 (func_call -> LISTP LPAREN IDENT RPAREN .)


state 80

    (36) func_call -> CDR LPAREN IDENT RPAREN .

    TIMES           reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    PLUS            reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    MINUS           reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    CONCAT          reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    SEMICOLON       reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    $end            reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    OD              reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    ELSE            reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    FI              reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    END             reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    DO              reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    THEN            reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    COMMA           reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    RSQUARE         reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)
    RPAREN          reduce using rule 36 (func_call -> CDR LPAREN IDENT RPAREN .)


state 81

    (24) param_list -> IDENT . COMMA param_list
    (25) param_list -> IDENT .

    COMMA           shift and go to state 86
    RPAREN          reduce using rule 25 (param_list -> IDENT .)


state 82

    (23) define_stmt -> DEFINE IDENT PROC LPAREN param_list . RPAREN stmt_list END

    RPAREN          shift and go to state 87


state 83

    (22) if_stmt -> IF expr THEN stmt_list ELSE . stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 88
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12

state 84

    (34) func_call -> CONS LPAREN IDENT COMMA IDENT . RPAREN

    RPAREN          shift and go to state 89


state 85

    (11) expr_list -> expr COMMA expr_list .

    RPAREN          reduce using rule 11 (expr_list -> expr COMMA expr_list .)


state 86

    (24) param_list -> IDENT COMMA . param_list
    (24) param_list -> . IDENT COMMA param_list
    (25) param_list -> . IDENT

    IDENT           shift and go to state 81

    param_list                     shift and go to state 90

state 87

    (23) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN . stmt_list END
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . SEMICOLON
    (5) stmt -> . assign_stmt
    (6) stmt -> . while_stmt
    (7) stmt -> . if_stmt
    (8) stmt -> . define_stmt
    (20) assign_stmt -> . IDENT ASSIGNOP expr
    (21) while_stmt -> . WHILE expr DO stmt_list OD
    (22) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (23) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    SEMICOLON       shift and go to state 2
    IDENT           shift and go to state 7
    WHILE           shift and go to state 1
    IF              shift and go to state 9
    DEFINE          shift and go to state 6

    stmt_list                      shift and go to state 91
    if_stmt                        shift and go to state 11
    define_stmt                    shift and go to state 3
    stmt                           shift and go to state 8
    assign_stmt                    shift and go to state 4
    while_stmt                     shift and go to state 12

state 88

    (22) if_stmt -> IF expr THEN stmt_list ELSE stmt_list . FI

    FI              shift and go to state 92


state 89

    (34) func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .

    TIMES           reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    PLUS            reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    MINUS           reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    CONCAT          reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    SEMICOLON       reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    $end            reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    OD              reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    ELSE            reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    FI              reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    END             reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    DO              reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    THEN            reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    COMMA           reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    RSQUARE         reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)
    RPAREN          reduce using rule 34 (func_call -> CONS LPAREN IDENT COMMA IDENT RPAREN .)


state 90

    (24) param_list -> IDENT COMMA param_list .

    RPAREN          reduce using rule 24 (param_list -> IDENT COMMA param_list .)


state 91

    (23) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list . END

    END             shift and go to state 93


state 92

    (22) if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .

    SEMICOLON       reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    FI              reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    $end            reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    OD              reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    ELSE            reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    END             reduce using rule 22 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)


state 93

    (23) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .

    SEMICOLON       reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    $end            reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    OD              reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    ELSE            reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    FI              reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    END             reduce using rule 23 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)

