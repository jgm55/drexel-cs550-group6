Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt SEMICOLON stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt -> assign_stmt
Rule 5     stmt -> while_stmt
Rule 6     stmt -> if_stmt
Rule 7     stmt -> define_stmt
Rule 8     expr -> expr PLUS term
Rule 9     expr -> expr MINUS term
Rule 10    expr_list -> expr COMMA expr_list
Rule 11    expr_list -> expr
Rule 12    expr -> term
Rule 13    term -> term TIMES fact
Rule 14    term -> fact
Rule 15    fact -> LPAREN expr RPAREN
Rule 16    fact -> NUMBER
Rule 17    fact -> d_ident
Rule 18    fact -> func_call
Rule 19    assign_stmt -> IDENT ASSIGNOP expr
Rule 20    while_stmt -> WHILE expr DO stmt_list OD
Rule 21    if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI
Rule 22    define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
Rule 23    param_list -> IDENT COMMA param_list
Rule 24    param_list -> IDENT
Rule 25    func_call -> IDENT LPAREN expr_list RPAREN
Rule 26    d_ident -> IDENT
Rule 27    expr -> expr CONCAT list
Rule 28    expr -> expr CONCAT d_ident
Rule 29    list -> LSQUARE sequence RSQUARE
Rule 30    list -> LSQUARE RSQUARE
Rule 31    sequence -> list_element COMMA sequence
Rule 32    sequence -> list_element
Rule 33    list_element -> expr
Rule 34    expr -> list
Rule 35    func_call -> CONS LPAREN expr COMMA expr RPAREN
Rule 36    func_call -> CAR LPAREN expr RPAREN
Rule 37    func_call -> CDR LPAREN expr RPAREN
Rule 38    func_call -> NULLP LPAREN expr RPAREN
Rule 39    func_call -> INTP LPAREN expr RPAREN
Rule 40    func_call -> LISTP LPAREN expr RPAREN

Terminals, with rules where they appear

ASSIGNOP             : 19
CAR                  : 36
CDR                  : 37
COMMA                : 10 23 31 35
CONCAT               : 27 28
CONS                 : 35
DEFINE               : 22
DO                   : 20
ELSE                 : 21
END                  : 22
FI                   : 21
IDENT                : 19 22 23 24 25 26
IF                   : 21
INTP                 : 39
LISTP                : 40
LPAREN               : 15 22 25 35 36 37 38 39 40
LSQUARE              : 29 30
MINUS                : 9
NULLP                : 38
NUMBER               : 16
OD                   : 20
PLUS                 : 8
PROC                 : 22
RPAREN               : 15 22 25 35 36 37 38 39 40
RSQUARE              : 29 30
SEMICOLON            : 2
THEN                 : 21
TIMES                : 13
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

assign_stmt          : 4
d_ident              : 17 28
define_stmt          : 7
expr                 : 8 9 10 11 15 19 20 21 27 28 33 35 35 36 37 38 39 40
expr_list            : 10 25
fact                 : 13 14
func_call            : 18
if_stmt              : 6
list                 : 27 34
list_element         : 31 32
param_list           : 22 23
program              : 0
sequence             : 29 31
stmt                 : 2 3
stmt_list            : 1 2 20 21 21 22
term                 : 8 9 12 13
while_stmt           : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 9
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11
    program                        shift and go to state 4

state 1

    (20) while_stmt -> WHILE . expr DO stmt_list OD
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 22
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 2

    (7) stmt -> define_stmt .

    SEMICOLON       reduce using rule 7 (stmt -> define_stmt .)
    OD              reduce using rule 7 (stmt -> define_stmt .)
    $end            reduce using rule 7 (stmt -> define_stmt .)
    ELSE            reduce using rule 7 (stmt -> define_stmt .)
    FI              reduce using rule 7 (stmt -> define_stmt .)
    END             reduce using rule 7 (stmt -> define_stmt .)


state 3

    (4) stmt -> assign_stmt .

    SEMICOLON       reduce using rule 4 (stmt -> assign_stmt .)
    OD              reduce using rule 4 (stmt -> assign_stmt .)
    $end            reduce using rule 4 (stmt -> assign_stmt .)
    ELSE            reduce using rule 4 (stmt -> assign_stmt .)
    FI              reduce using rule 4 (stmt -> assign_stmt .)
    END             reduce using rule 4 (stmt -> assign_stmt .)


state 4

    (0) S' -> program .



state 5

    (22) define_stmt -> DEFINE . IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 28


state 6

    (19) assign_stmt -> IDENT . ASSIGNOP expr

    ASSIGNOP        shift and go to state 29


state 7

    (2) stmt_list -> stmt . SEMICOLON stmt_list
    (3) stmt_list -> stmt .

    SEMICOLON       shift and go to state 30
    $end            reduce using rule 3 (stmt_list -> stmt .)
    OD              reduce using rule 3 (stmt_list -> stmt .)
    ELSE            reduce using rule 3 (stmt_list -> stmt .)
    FI              reduce using rule 3 (stmt_list -> stmt .)
    END             reduce using rule 3 (stmt_list -> stmt .)


state 8

    (21) if_stmt -> IF . expr THEN stmt_list ELSE stmt_list FI
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 31
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 9

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 10

    (6) stmt -> if_stmt .

    SEMICOLON       reduce using rule 6 (stmt -> if_stmt .)
    OD              reduce using rule 6 (stmt -> if_stmt .)
    $end            reduce using rule 6 (stmt -> if_stmt .)
    ELSE            reduce using rule 6 (stmt -> if_stmt .)
    FI              reduce using rule 6 (stmt -> if_stmt .)
    END             reduce using rule 6 (stmt -> if_stmt .)


state 11

    (5) stmt -> while_stmt .

    SEMICOLON       reduce using rule 5 (stmt -> while_stmt .)
    OD              reduce using rule 5 (stmt -> while_stmt .)
    $end            reduce using rule 5 (stmt -> while_stmt .)
    ELSE            reduce using rule 5 (stmt -> while_stmt .)
    FI              reduce using rule 5 (stmt -> while_stmt .)
    END             reduce using rule 5 (stmt -> while_stmt .)


state 12

    (35) func_call -> CONS . LPAREN expr COMMA expr RPAREN

    LPAREN          shift and go to state 32


state 13

    (29) list -> LSQUARE . sequence RSQUARE
    (30) list -> LSQUARE . RSQUARE
    (31) sequence -> . list_element COMMA sequence
    (32) sequence -> . list_element
    (33) list_element -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    RSQUARE         shift and go to state 34
    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    list_element                   shift and go to state 35
    term                           shift and go to state 21
    sequence                       shift and go to state 33
    expr                           shift and go to state 36
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 14

    (16) fact -> NUMBER .

    TIMES           reduce using rule 16 (fact -> NUMBER .)
    RPAREN          reduce using rule 16 (fact -> NUMBER .)
    PLUS            reduce using rule 16 (fact -> NUMBER .)
    MINUS           reduce using rule 16 (fact -> NUMBER .)
    CONCAT          reduce using rule 16 (fact -> NUMBER .)
    DO              reduce using rule 16 (fact -> NUMBER .)
    THEN            reduce using rule 16 (fact -> NUMBER .)
    COMMA           reduce using rule 16 (fact -> NUMBER .)
    RSQUARE         reduce using rule 16 (fact -> NUMBER .)
    SEMICOLON       reduce using rule 16 (fact -> NUMBER .)
    $end            reduce using rule 16 (fact -> NUMBER .)
    OD              reduce using rule 16 (fact -> NUMBER .)
    ELSE            reduce using rule 16 (fact -> NUMBER .)
    FI              reduce using rule 16 (fact -> NUMBER .)
    END             reduce using rule 16 (fact -> NUMBER .)


state 15

    (36) func_call -> CAR . LPAREN expr RPAREN

    LPAREN          shift and go to state 37


state 16

    (18) fact -> func_call .

    TIMES           reduce using rule 18 (fact -> func_call .)
    RPAREN          reduce using rule 18 (fact -> func_call .)
    PLUS            reduce using rule 18 (fact -> func_call .)
    MINUS           reduce using rule 18 (fact -> func_call .)
    CONCAT          reduce using rule 18 (fact -> func_call .)
    DO              reduce using rule 18 (fact -> func_call .)
    THEN            reduce using rule 18 (fact -> func_call .)
    COMMA           reduce using rule 18 (fact -> func_call .)
    RSQUARE         reduce using rule 18 (fact -> func_call .)
    SEMICOLON       reduce using rule 18 (fact -> func_call .)
    $end            reduce using rule 18 (fact -> func_call .)
    OD              reduce using rule 18 (fact -> func_call .)
    ELSE            reduce using rule 18 (fact -> func_call .)
    FI              reduce using rule 18 (fact -> func_call .)
    END             reduce using rule 18 (fact -> func_call .)


state 17

    (26) d_ident -> IDENT .
    (25) func_call -> IDENT . LPAREN expr_list RPAREN

    TIMES           reduce using rule 26 (d_ident -> IDENT .)
    COMMA           reduce using rule 26 (d_ident -> IDENT .)
    PLUS            reduce using rule 26 (d_ident -> IDENT .)
    MINUS           reduce using rule 26 (d_ident -> IDENT .)
    CONCAT          reduce using rule 26 (d_ident -> IDENT .)
    RSQUARE         reduce using rule 26 (d_ident -> IDENT .)
    RPAREN          reduce using rule 26 (d_ident -> IDENT .)
    DO              reduce using rule 26 (d_ident -> IDENT .)
    THEN            reduce using rule 26 (d_ident -> IDENT .)
    SEMICOLON       reduce using rule 26 (d_ident -> IDENT .)
    $end            reduce using rule 26 (d_ident -> IDENT .)
    OD              reduce using rule 26 (d_ident -> IDENT .)
    ELSE            reduce using rule 26 (d_ident -> IDENT .)
    FI              reduce using rule 26 (d_ident -> IDENT .)
    END             reduce using rule 26 (d_ident -> IDENT .)
    LPAREN          shift and go to state 38


state 18

    (38) func_call -> NULLP . LPAREN expr RPAREN

    LPAREN          shift and go to state 39


state 19

    (39) func_call -> INTP . LPAREN expr RPAREN

    LPAREN          shift and go to state 40


state 20

    (15) fact -> LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 41
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 21

    (12) expr -> term .
    (13) term -> term . TIMES fact

    RPAREN          reduce using rule 12 (expr -> term .)
    PLUS            reduce using rule 12 (expr -> term .)
    MINUS           reduce using rule 12 (expr -> term .)
    CONCAT          reduce using rule 12 (expr -> term .)
    COMMA           reduce using rule 12 (expr -> term .)
    RSQUARE         reduce using rule 12 (expr -> term .)
    SEMICOLON       reduce using rule 12 (expr -> term .)
    $end            reduce using rule 12 (expr -> term .)
    OD              reduce using rule 12 (expr -> term .)
    ELSE            reduce using rule 12 (expr -> term .)
    FI              reduce using rule 12 (expr -> term .)
    END             reduce using rule 12 (expr -> term .)
    THEN            reduce using rule 12 (expr -> term .)
    DO              reduce using rule 12 (expr -> term .)
    TIMES           shift and go to state 42


state 22

    (20) while_stmt -> WHILE expr . DO stmt_list OD
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    DO              shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 23

    (34) expr -> list .

    RPAREN          reduce using rule 34 (expr -> list .)
    PLUS            reduce using rule 34 (expr -> list .)
    MINUS           reduce using rule 34 (expr -> list .)
    CONCAT          reduce using rule 34 (expr -> list .)
    COMMA           reduce using rule 34 (expr -> list .)
    RSQUARE         reduce using rule 34 (expr -> list .)
    SEMICOLON       reduce using rule 34 (expr -> list .)
    $end            reduce using rule 34 (expr -> list .)
    OD              reduce using rule 34 (expr -> list .)
    ELSE            reduce using rule 34 (expr -> list .)
    FI              reduce using rule 34 (expr -> list .)
    END             reduce using rule 34 (expr -> list .)
    THEN            reduce using rule 34 (expr -> list .)
    DO              reduce using rule 34 (expr -> list .)


state 24

    (40) func_call -> LISTP . LPAREN expr RPAREN

    LPAREN          shift and go to state 47


state 25

    (37) func_call -> CDR . LPAREN expr RPAREN

    LPAREN          shift and go to state 48


state 26

    (17) fact -> d_ident .

    TIMES           reduce using rule 17 (fact -> d_ident .)
    RPAREN          reduce using rule 17 (fact -> d_ident .)
    PLUS            reduce using rule 17 (fact -> d_ident .)
    MINUS           reduce using rule 17 (fact -> d_ident .)
    CONCAT          reduce using rule 17 (fact -> d_ident .)
    DO              reduce using rule 17 (fact -> d_ident .)
    THEN            reduce using rule 17 (fact -> d_ident .)
    COMMA           reduce using rule 17 (fact -> d_ident .)
    RSQUARE         reduce using rule 17 (fact -> d_ident .)
    SEMICOLON       reduce using rule 17 (fact -> d_ident .)
    $end            reduce using rule 17 (fact -> d_ident .)
    OD              reduce using rule 17 (fact -> d_ident .)
    ELSE            reduce using rule 17 (fact -> d_ident .)
    FI              reduce using rule 17 (fact -> d_ident .)
    END             reduce using rule 17 (fact -> d_ident .)


state 27

    (14) term -> fact .

    TIMES           reduce using rule 14 (term -> fact .)
    DO              reduce using rule 14 (term -> fact .)
    PLUS            reduce using rule 14 (term -> fact .)
    MINUS           reduce using rule 14 (term -> fact .)
    CONCAT          reduce using rule 14 (term -> fact .)
    THEN            reduce using rule 14 (term -> fact .)
    COMMA           reduce using rule 14 (term -> fact .)
    RSQUARE         reduce using rule 14 (term -> fact .)
    RPAREN          reduce using rule 14 (term -> fact .)
    SEMICOLON       reduce using rule 14 (term -> fact .)
    $end            reduce using rule 14 (term -> fact .)
    OD              reduce using rule 14 (term -> fact .)
    ELSE            reduce using rule 14 (term -> fact .)
    FI              reduce using rule 14 (term -> fact .)
    END             reduce using rule 14 (term -> fact .)


state 28

    (22) define_stmt -> DEFINE IDENT . PROC LPAREN param_list RPAREN stmt_list END

    PROC            shift and go to state 49


state 29

    (19) assign_stmt -> IDENT ASSIGNOP . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 50
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 30

    (2) stmt_list -> stmt SEMICOLON . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 51
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11

state 31

    (21) if_stmt -> IF expr . THEN stmt_list ELSE stmt_list FI
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    THEN            shift and go to state 52
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 32

    (35) func_call -> CONS LPAREN . expr COMMA expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 53
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 33

    (29) list -> LSQUARE sequence . RSQUARE

    RSQUARE         shift and go to state 54


state 34

    (30) list -> LSQUARE RSQUARE .

    PLUS            reduce using rule 30 (list -> LSQUARE RSQUARE .)
    MINUS           reduce using rule 30 (list -> LSQUARE RSQUARE .)
    CONCAT          reduce using rule 30 (list -> LSQUARE RSQUARE .)
    COMMA           reduce using rule 30 (list -> LSQUARE RSQUARE .)
    RSQUARE         reduce using rule 30 (list -> LSQUARE RSQUARE .)
    DO              reduce using rule 30 (list -> LSQUARE RSQUARE .)
    RPAREN          reduce using rule 30 (list -> LSQUARE RSQUARE .)
    THEN            reduce using rule 30 (list -> LSQUARE RSQUARE .)
    SEMICOLON       reduce using rule 30 (list -> LSQUARE RSQUARE .)
    $end            reduce using rule 30 (list -> LSQUARE RSQUARE .)
    OD              reduce using rule 30 (list -> LSQUARE RSQUARE .)
    ELSE            reduce using rule 30 (list -> LSQUARE RSQUARE .)
    FI              reduce using rule 30 (list -> LSQUARE RSQUARE .)
    END             reduce using rule 30 (list -> LSQUARE RSQUARE .)


state 35

    (31) sequence -> list_element . COMMA sequence
    (32) sequence -> list_element .

    COMMA           shift and go to state 55
    RSQUARE         reduce using rule 32 (sequence -> list_element .)


state 36

    (33) list_element -> expr .
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    COMMA           reduce using rule 33 (list_element -> expr .)
    RSQUARE         reduce using rule 33 (list_element -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 37

    (36) func_call -> CAR LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 56
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 38

    (25) func_call -> IDENT LPAREN . expr_list RPAREN
    (10) expr_list -> . expr COMMA expr_list
    (11) expr_list -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr_list                      shift and go to state 57
    list                           shift and go to state 23
    expr                           shift and go to state 58
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 39

    (38) func_call -> NULLP LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 59
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 40

    (39) func_call -> INTP LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 60
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 41

    (15) fact -> LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 42

    (13) term -> term TIMES . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    d_ident                        shift and go to state 26
    fact                           shift and go to state 62

state 43

    (20) while_stmt -> WHILE expr DO . stmt_list OD
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 63
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11

state 44

    (8) expr -> expr PLUS . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 64
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 45

    (9) expr -> expr MINUS . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 65
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 46

    (27) expr -> expr CONCAT . list
    (28) expr -> expr CONCAT . d_ident
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (26) d_ident -> . IDENT

    LSQUARE         shift and go to state 13
    IDENT           shift and go to state 66

    d_ident                        shift and go to state 68
    list                           shift and go to state 67

state 47

    (40) func_call -> LISTP LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 69
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 48

    (37) func_call -> CDR LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 70
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 49

    (22) define_stmt -> DEFINE IDENT PROC . LPAREN param_list RPAREN stmt_list END

    LPAREN          shift and go to state 71


state 50

    (19) assign_stmt -> IDENT ASSIGNOP expr .
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    SEMICOLON       reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    $end            reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    END             reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    OD              reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    ELSE            reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    FI              reduce using rule 19 (assign_stmt -> IDENT ASSIGNOP expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 51

    (2) stmt_list -> stmt SEMICOLON stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    OD              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    ELSE            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    FI              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    END             reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)


state 52

    (21) if_stmt -> IF expr THEN . stmt_list ELSE stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 72
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11

state 53

    (35) func_call -> CONS LPAREN expr . COMMA expr RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    COMMA           shift and go to state 73
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 54

    (29) list -> LSQUARE sequence RSQUARE .

    PLUS            reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    MINUS           reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    CONCAT          reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    COMMA           reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    RSQUARE         reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    DO              reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    RPAREN          reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    THEN            reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    SEMICOLON       reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    $end            reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    OD              reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    ELSE            reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    FI              reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)
    END             reduce using rule 29 (list -> LSQUARE sequence RSQUARE .)


state 55

    (31) sequence -> list_element COMMA . sequence
    (31) sequence -> . list_element COMMA sequence
    (32) sequence -> . list_element
    (33) list_element -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    list_element                   shift and go to state 35
    term                           shift and go to state 21
    sequence                       shift and go to state 74
    expr                           shift and go to state 36
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 56

    (36) func_call -> CAR LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 57

    (25) func_call -> IDENT LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 76


state 58

    (10) expr_list -> expr . COMMA expr_list
    (11) expr_list -> expr .
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    COMMA           shift and go to state 77
    RPAREN          reduce using rule 11 (expr_list -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 59

    (38) func_call -> NULLP LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 60

    (39) func_call -> INTP LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 79
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 61

    (15) fact -> LPAREN expr RPAREN .

    TIMES           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    CONCAT          reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    DO              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    THEN            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    $end            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    OD              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    FI              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    END             reduce using rule 15 (fact -> LPAREN expr RPAREN .)


state 62

    (13) term -> term TIMES fact .

    TIMES           reduce using rule 13 (term -> term TIMES fact .)
    DO              reduce using rule 13 (term -> term TIMES fact .)
    PLUS            reduce using rule 13 (term -> term TIMES fact .)
    MINUS           reduce using rule 13 (term -> term TIMES fact .)
    CONCAT          reduce using rule 13 (term -> term TIMES fact .)
    THEN            reduce using rule 13 (term -> term TIMES fact .)
    COMMA           reduce using rule 13 (term -> term TIMES fact .)
    RSQUARE         reduce using rule 13 (term -> term TIMES fact .)
    RPAREN          reduce using rule 13 (term -> term TIMES fact .)
    SEMICOLON       reduce using rule 13 (term -> term TIMES fact .)
    $end            reduce using rule 13 (term -> term TIMES fact .)
    OD              reduce using rule 13 (term -> term TIMES fact .)
    ELSE            reduce using rule 13 (term -> term TIMES fact .)
    FI              reduce using rule 13 (term -> term TIMES fact .)
    END             reduce using rule 13 (term -> term TIMES fact .)


state 63

    (20) while_stmt -> WHILE expr DO stmt_list . OD

    OD              shift and go to state 80


state 64

    (8) expr -> expr PLUS term .
    (13) term -> term . TIMES fact

    RPAREN          reduce using rule 8 (expr -> expr PLUS term .)
    PLUS            reduce using rule 8 (expr -> expr PLUS term .)
    MINUS           reduce using rule 8 (expr -> expr PLUS term .)
    CONCAT          reduce using rule 8 (expr -> expr PLUS term .)
    COMMA           reduce using rule 8 (expr -> expr PLUS term .)
    RSQUARE         reduce using rule 8 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 8 (expr -> expr PLUS term .)
    $end            reduce using rule 8 (expr -> expr PLUS term .)
    OD              reduce using rule 8 (expr -> expr PLUS term .)
    ELSE            reduce using rule 8 (expr -> expr PLUS term .)
    FI              reduce using rule 8 (expr -> expr PLUS term .)
    END             reduce using rule 8 (expr -> expr PLUS term .)
    THEN            reduce using rule 8 (expr -> expr PLUS term .)
    DO              reduce using rule 8 (expr -> expr PLUS term .)
    TIMES           shift and go to state 42


state 65

    (9) expr -> expr MINUS term .
    (13) term -> term . TIMES fact

    RPAREN          reduce using rule 9 (expr -> expr MINUS term .)
    PLUS            reduce using rule 9 (expr -> expr MINUS term .)
    MINUS           reduce using rule 9 (expr -> expr MINUS term .)
    CONCAT          reduce using rule 9 (expr -> expr MINUS term .)
    COMMA           reduce using rule 9 (expr -> expr MINUS term .)
    RSQUARE         reduce using rule 9 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 9 (expr -> expr MINUS term .)
    $end            reduce using rule 9 (expr -> expr MINUS term .)
    OD              reduce using rule 9 (expr -> expr MINUS term .)
    ELSE            reduce using rule 9 (expr -> expr MINUS term .)
    FI              reduce using rule 9 (expr -> expr MINUS term .)
    END             reduce using rule 9 (expr -> expr MINUS term .)
    THEN            reduce using rule 9 (expr -> expr MINUS term .)
    DO              reduce using rule 9 (expr -> expr MINUS term .)
    TIMES           shift and go to state 42


state 66

    (26) d_ident -> IDENT .

    DO              reduce using rule 26 (d_ident -> IDENT .)
    PLUS            reduce using rule 26 (d_ident -> IDENT .)
    MINUS           reduce using rule 26 (d_ident -> IDENT .)
    CONCAT          reduce using rule 26 (d_ident -> IDENT .)
    THEN            reduce using rule 26 (d_ident -> IDENT .)
    COMMA           reduce using rule 26 (d_ident -> IDENT .)
    RSQUARE         reduce using rule 26 (d_ident -> IDENT .)
    RPAREN          reduce using rule 26 (d_ident -> IDENT .)
    SEMICOLON       reduce using rule 26 (d_ident -> IDENT .)
    $end            reduce using rule 26 (d_ident -> IDENT .)
    OD              reduce using rule 26 (d_ident -> IDENT .)
    ELSE            reduce using rule 26 (d_ident -> IDENT .)
    FI              reduce using rule 26 (d_ident -> IDENT .)
    END             reduce using rule 26 (d_ident -> IDENT .)


state 67

    (27) expr -> expr CONCAT list .

    RPAREN          reduce using rule 27 (expr -> expr CONCAT list .)
    PLUS            reduce using rule 27 (expr -> expr CONCAT list .)
    MINUS           reduce using rule 27 (expr -> expr CONCAT list .)
    CONCAT          reduce using rule 27 (expr -> expr CONCAT list .)
    COMMA           reduce using rule 27 (expr -> expr CONCAT list .)
    RSQUARE         reduce using rule 27 (expr -> expr CONCAT list .)
    SEMICOLON       reduce using rule 27 (expr -> expr CONCAT list .)
    $end            reduce using rule 27 (expr -> expr CONCAT list .)
    OD              reduce using rule 27 (expr -> expr CONCAT list .)
    ELSE            reduce using rule 27 (expr -> expr CONCAT list .)
    FI              reduce using rule 27 (expr -> expr CONCAT list .)
    END             reduce using rule 27 (expr -> expr CONCAT list .)
    THEN            reduce using rule 27 (expr -> expr CONCAT list .)
    DO              reduce using rule 27 (expr -> expr CONCAT list .)


state 68

    (28) expr -> expr CONCAT d_ident .

    RPAREN          reduce using rule 28 (expr -> expr CONCAT d_ident .)
    PLUS            reduce using rule 28 (expr -> expr CONCAT d_ident .)
    MINUS           reduce using rule 28 (expr -> expr CONCAT d_ident .)
    CONCAT          reduce using rule 28 (expr -> expr CONCAT d_ident .)
    COMMA           reduce using rule 28 (expr -> expr CONCAT d_ident .)
    RSQUARE         reduce using rule 28 (expr -> expr CONCAT d_ident .)
    SEMICOLON       reduce using rule 28 (expr -> expr CONCAT d_ident .)
    $end            reduce using rule 28 (expr -> expr CONCAT d_ident .)
    OD              reduce using rule 28 (expr -> expr CONCAT d_ident .)
    ELSE            reduce using rule 28 (expr -> expr CONCAT d_ident .)
    FI              reduce using rule 28 (expr -> expr CONCAT d_ident .)
    END             reduce using rule 28 (expr -> expr CONCAT d_ident .)
    THEN            reduce using rule 28 (expr -> expr CONCAT d_ident .)
    DO              reduce using rule 28 (expr -> expr CONCAT d_ident .)


state 69

    (40) func_call -> LISTP LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 81
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 70

    (37) func_call -> CDR LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 71

    (22) define_stmt -> DEFINE IDENT PROC LPAREN . param_list RPAREN stmt_list END
    (23) param_list -> . IDENT COMMA param_list
    (24) param_list -> . IDENT

    IDENT           shift and go to state 83

    param_list                     shift and go to state 84

state 72

    (21) if_stmt -> IF expr THEN stmt_list . ELSE stmt_list FI

    ELSE            shift and go to state 85


state 73

    (35) func_call -> CONS LPAREN expr COMMA . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 86
    list                           shift and go to state 23
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 74

    (31) sequence -> list_element COMMA sequence .

    RSQUARE         reduce using rule 31 (sequence -> list_element COMMA sequence .)


state 75

    (36) func_call -> CAR LPAREN expr RPAREN .

    TIMES           reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    DO              reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    PLUS            reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    MINUS           reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    CONCAT          reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    THEN            reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    COMMA           reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    RPAREN          reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    $end            reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    OD              reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    ELSE            reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    FI              reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)
    END             reduce using rule 36 (func_call -> CAR LPAREN expr RPAREN .)


state 76

    (25) func_call -> IDENT LPAREN expr_list RPAREN .

    TIMES           reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    DO              reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    CONCAT          reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    THEN            reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RSQUARE         reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    $end            reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    OD              reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    ELSE            reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    FI              reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)
    END             reduce using rule 25 (func_call -> IDENT LPAREN expr_list RPAREN .)


state 77

    (10) expr_list -> expr COMMA . expr_list
    (10) expr_list -> . expr COMMA expr_list
    (11) expr_list -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (27) expr -> . expr CONCAT list
    (28) expr -> . expr CONCAT d_ident
    (34) expr -> . list
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (29) list -> . LSQUARE sequence RSQUARE
    (30) list -> . LSQUARE RSQUARE
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . d_ident
    (18) fact -> . func_call
    (26) d_ident -> . IDENT
    (25) func_call -> . IDENT LPAREN expr_list RPAREN
    (35) func_call -> . CONS LPAREN expr COMMA expr RPAREN
    (36) func_call -> . CAR LPAREN expr RPAREN
    (37) func_call -> . CDR LPAREN expr RPAREN
    (38) func_call -> . NULLP LPAREN expr RPAREN
    (39) func_call -> . INTP LPAREN expr RPAREN
    (40) func_call -> . LISTP LPAREN expr RPAREN

    LSQUARE         shift and go to state 13
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 14
    IDENT           shift and go to state 17
    CONS            shift and go to state 12
    CAR             shift and go to state 15
    CDR             shift and go to state 25
    NULLP           shift and go to state 18
    INTP            shift and go to state 19
    LISTP           shift and go to state 24

    func_call                      shift and go to state 16
    term                           shift and go to state 21
    expr                           shift and go to state 58
    list                           shift and go to state 23
    expr_list                      shift and go to state 87
    d_ident                        shift and go to state 26
    fact                           shift and go to state 27

state 78

    (38) func_call -> NULLP LPAREN expr RPAREN .

    TIMES           reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    DO              reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    PLUS            reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    MINUS           reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    CONCAT          reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    THEN            reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    COMMA           reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    RPAREN          reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    $end            reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    OD              reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    ELSE            reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    FI              reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)
    END             reduce using rule 38 (func_call -> NULLP LPAREN expr RPAREN .)


state 79

    (39) func_call -> INTP LPAREN expr RPAREN .

    TIMES           reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    DO              reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    PLUS            reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    MINUS           reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    CONCAT          reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    THEN            reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    COMMA           reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    RPAREN          reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    $end            reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    OD              reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    ELSE            reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    FI              reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)
    END             reduce using rule 39 (func_call -> INTP LPAREN expr RPAREN .)


state 80

    (20) while_stmt -> WHILE expr DO stmt_list OD .

    SEMICOLON       reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)
    ELSE            reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)
    FI              reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)
    OD              reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)
    $end            reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)
    END             reduce using rule 20 (while_stmt -> WHILE expr DO stmt_list OD .)


state 81

    (40) func_call -> LISTP LPAREN expr RPAREN .

    TIMES           reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    DO              reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    PLUS            reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    MINUS           reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    CONCAT          reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    THEN            reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    COMMA           reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    RPAREN          reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    $end            reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    OD              reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    ELSE            reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    FI              reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)
    END             reduce using rule 40 (func_call -> LISTP LPAREN expr RPAREN .)


state 82

    (37) func_call -> CDR LPAREN expr RPAREN .

    TIMES           reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    DO              reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    PLUS            reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    MINUS           reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    CONCAT          reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    THEN            reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    COMMA           reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    RPAREN          reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    $end            reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    OD              reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    ELSE            reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    FI              reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)
    END             reduce using rule 37 (func_call -> CDR LPAREN expr RPAREN .)


state 83

    (23) param_list -> IDENT . COMMA param_list
    (24) param_list -> IDENT .

    COMMA           shift and go to state 88
    RPAREN          reduce using rule 24 (param_list -> IDENT .)


state 84

    (22) define_stmt -> DEFINE IDENT PROC LPAREN param_list . RPAREN stmt_list END

    RPAREN          shift and go to state 89


state 85

    (21) if_stmt -> IF expr THEN stmt_list ELSE . stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 90
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11

state 86

    (35) func_call -> CONS LPAREN expr COMMA expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term
    (27) expr -> expr . CONCAT list
    (28) expr -> expr . CONCAT d_ident

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    CONCAT          shift and go to state 46


state 87

    (10) expr_list -> expr COMMA expr_list .

    RPAREN          reduce using rule 10 (expr_list -> expr COMMA expr_list .)


state 88

    (23) param_list -> IDENT COMMA . param_list
    (23) param_list -> . IDENT COMMA param_list
    (24) param_list -> . IDENT

    IDENT           shift and go to state 83

    param_list                     shift and go to state 92

state 89

    (22) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN . stmt_list END
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . IDENT ASSIGNOP expr
    (20) while_stmt -> . WHILE expr DO stmt_list OD
    (21) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (22) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 8
    DEFINE          shift and go to state 5

    stmt_list                      shift and go to state 93
    if_stmt                        shift and go to state 10
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 11

state 90

    (21) if_stmt -> IF expr THEN stmt_list ELSE stmt_list . FI

    FI              shift and go to state 94


state 91

    (35) func_call -> CONS LPAREN expr COMMA expr RPAREN .

    TIMES           reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    DO              reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    CONCAT          reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    THEN            reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    RSQUARE         reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    SEMICOLON       reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    $end            reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    OD              reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    FI              reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)
    END             reduce using rule 35 (func_call -> CONS LPAREN expr COMMA expr RPAREN .)


state 92

    (23) param_list -> IDENT COMMA param_list .

    RPAREN          reduce using rule 23 (param_list -> IDENT COMMA param_list .)


state 93

    (22) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list . END

    END             shift and go to state 95


state 94

    (21) if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .

    SEMICOLON       reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    END             reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    $end            reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    OD              reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    ELSE            reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    FI              reduce using rule 21 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)


state 95

    (22) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .

    SEMICOLON       reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    $end            reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    OD              reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    ELSE            reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    FI              reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    END             reduce using rule 22 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)

